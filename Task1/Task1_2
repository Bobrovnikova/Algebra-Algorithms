import random
import math
import secrets
from math import log

primes = [ 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37,\
           41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83,\
           89, 97, 101, 103, 107, 109, 113, 127 ];
num_of_primes = len(primes);

n_min = 2**123;
n_max = 2**128;

# PART 1: generating n

divisors_power = [0]*num_of_primes;
divisors_power[0] = 1;
    
n = 2; # 2 is one of the divisors of future (n-1)
# according to condition, (n-1) must have at least 5 different divisors;
# it already has one -- '2', so 4 more are left to find
four_more = random.sample(range(1,num_of_primes),4);
print(four_more)

for multiplier in four_more:
    n *= primes[ multiplier ];
    divisors_power[ multiplier ] += 1;

# generating other divisors
last_multiplier = 1;
while n < n_min:
    last_multiplier = random.randint(0,num_of_primes-1);
    divisors_power[last_multiplier] += 1;
    n *= primes[last_multiplier];

# in case if n is out of range
while n > n_max:
    n /= primes[ last_multiplier ];
    divisors_power[last_multiplier] -= 1;
    last_multiplier -= 1;
    n *= primes[ last_multiplier ];
    divisors_power[last_multiplier] += 1;

n += 1;
n = int(n)

# creating the list of divisors of (n-1)
divisors = [];
for i in range(0,num_of_primes):
    if divisors_power[i]:
        divisors.append( primes[i] );

# n is generated:
print('n is equal ',n);
print('here are all the divisors of (n-1): ',divisors);

# PART 2: checking if n is prime

keep_looking = True;
a_max = math.ceil( log(n)/log(2) );
a = 1;
while keep_looking and (a < a_max):
    a += 1;
    #print(a,pow(a,n-1,n))
    if ( pow(a,n-1,n) == 1 ):
        for div in divisors:
            deg = (n-1)/div;
            deg = int(deg);
            #print(a,div,pow(a,deg,n))
            if ( pow(a,deg,n) == 1 ):
                break;
            elif (div == divisors[-1]):
                keep_looking = False;
    else:
        continue;

# now we know whether n is prime or not
if keep_looking:
    print('n is not prime,');
    # if n is not prime we're gonna apply Pollard's p-1-algorithm
    a = 2;
    N = 128;
    k_factorial = 1;
    bk = 0;
    divisor_is_found = False;
    k=0;
    while ~divisor_is_found and k<N:
        k += 1;
        k_factorial *= k;
        bk = pow(a,k_factorial,n);
        bk = (bk-1)%n;
        gcd = math.gcd(bk,n);
        if (gcd!=1) and (gcd!=n):
            divisor_is_found = True;
    if divisor_is_found:
        print('non-trivial divisor of n is ',gcd);
        #print('Greatest common divisor of n and found divisor is: ',math.gcd(n,gcd))
    else:
        print('but a divisor is not found:(')
else:
    print('n is prime!')
    print('a is equal ',a,'\n')

